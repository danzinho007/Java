Estudo Java

Aulas :
01 - História
Exercícios de Java #01
02 - Como funciona o Java
Exercícios de Java #02
03 - Instalando JDK
Exercícios de Java #03
04 - Primeiro Programa 
05 - 
--------------------------------------------------

-Primeiros Computadores = Não tinham linguagem
-Linguagens de Alto Nível = Pascal ( PAS )
Program PASCAL;
var
	msg: String;
begin
	msg := "Olá, Mundo";
	write(msg);
eng
-PAS > Compilador > Código Executável > PC
-Linguagem C = Linguagem Multiplataforma (  Compiladores compatíveis pra várias Plataformas )
#include <stdio.h>
void main () {
    printf ("Olá, Mundo!");
}
-Linguagem C > C++ = ++ Orientação a Objeto > C #
-


Forças Armadas >

Aeronáutica :
EAGSSin

Marinha :
CAP

Linguagem de Programação :
Delphi
De Maquine
Assembly
Visual Basic

Montadores :
Assembler

Sistema operacional 
Windows X

Código Fonte > Código Objeto >Código Executável

CF > CO = Compilação
CO > CE = Linker
CF > CE = Interpretador

Operadores :
% : resto da divisão
5 % 2 = 1
8 % 2 = 0

Fluxograma = Representação gráfica de dados

----------Aula 02 : 

Linguagem C > Compilador > Código Executável > PC
Linguagem C = Linguagem Multiplataforma, porém depende de Compiladores

Linguagem Java :
public static void main (String[] args){
	System.out.println("Olá, Mundo!");
}

Linguagem Java > Compilador JavaC > ByteCode > PC = Erro
Linguagem Java > Compilador JavaC > ByteCode > JVM > PC
JVM = Java Virtual Machine
Linguagem Java > Compilador JavaC > ByteCode > JVM > PC Window
Linguagem Java > Compilador JavaC > ByteCode > JVM > PC Mac
Linguagem Java > Compilador JavaC > ByteCode > JVM > Pc Linux
Linguagem Java > Compilador JavaC > ByteCode > JVM > Cell
Linguagem Java > Compilador JavaC > ByteCode > JVM > Relógio

WORA ( Write Once Run Anywhere )= Escreva Uma Vez e Execute em qualquer lugar 
                       JDK vs JRE
JDK (Java Development Kit)  | JRE (Java Runtime Environment)
Kit de Desenvolvimento Java | Ambiente de Execução Java
Desenvolver pra Java        | Usar o Java
I |Java Lang              |J| JVM : Máquina Virtual
D |Java Tools :	          |R| Loader/Verificador
E |JavaC ( Compilador )   |E| ( Parte interna do Bytecode)	
  |Debugger (Verificação) | | Interpretador/Gerenciador  	  |API's 		  | |	( Transformar o Código )
  | 			  | | Compilador JIT ( Just in time )
  |   			  | | 	( Tradução em Tempo Real)
  |                       | | Bibliotecas

IDE = Índice de Desenvolvimento Integrado
IDE NetBeans
------------------

-Java : 
SE = Edição padrão
Desenvolver em Janelas
EM = Edição Maior
Acesso a Grandes Banco de Dados
ME = Edição Pequena
Desenvolver portátil
----------------------------------------------------------
Aula 04

package primeiroprograma;
public class PrimeiroPrograma {
  public static void main(String[] args){
    System.out.print("Olá, Mundo!");
 }
}

package = pacote = primeiroprograma
class = classe = PrimeiroPrograma
void = método
main = principal
System = classe
out = saída
print = imprima / mostre

Eu tenho um método Principal que está dentro da classe principal que está dentro do pacote primeiroprograma

Sempre que a 1° letra é Maiúscula é Classe
Exemplo : MinhaClasse AlunoCursoEmVideo

Se 1°for Minúscula ela pode ser : Atributo, Variável ou Método
Exemplo : nomeAluno mediaPrimeiroBimestre lancarNotaAluno

Se for tudo em Minúsculo é pacote
Exemplo : meu_pacote alunocursoemvideo

Se for tudo em Maiúsuclo é constante
Exemplo MINHA_CONSTANTE VALOR_DE_PI

-----------------------------------------------
Pesquisar Java JIT, IDE Eclipse, IDE InteligJay, 


==================

Forças Armadas >

Aeronáutica :
EAGSSin

Marinha :
CAP

Linguagem de Programação :
Delphi
De Maquine
Assembly
Visual Basic

Montadores :
Assembler

Sistema operacional 
Windows X

Código Fonte > Código Objeto >Código Executável

CF > CO = Compilação
CO > CE = Linker
CF > CE = Interpretador

Operadores :
% : resto da divisão
5 % 2 = 1
8 % 2 = 0

Fluxograma = Representação gráfica de dados

Java > Compilador Java ( JavaC ) > Código Binário > Bytecode > Java Virtual Machine ( JVM ) > PC

WORA ( Write Once Run Anywhere ) ( Escreva uma vez e execute em qualquer lugar )

1-JRE ( Java Runtime Environment ) >

JVM :
Loader / Verificador
Interpretador / Gerenciador de Memória 
Compilador JIT 

Bibliotecas :

2-JDK ( Java Development Kit ) >

JRE 

Java Lang

Java Tools :
Java C 
Debugger
APIs

IDE

Programação KhanAcademy
Javascript

Aula 01 :

//Fundo Azul
background(209, 255, 244);

//Texto tamanho 22
textSize(22);

//Cor do Texto preto
fill(0, 0, 0)

//Mensagem em 20, 180
text("Agora é hora de começar a aprender", 20, 181);

//Linha de 200,200 a 150,250
line(200, 200, 150, 250);

//imagem em 40, 250
image(getImage("creatures/Happer-Happy"), 40, 250);

Aula 02 :

-Função ellipse ( Círculo )
ellipse(x, y, w, h)
x = horizontal ( para direita ou para esquerda ) 0 até 400
y = vertical ( para cima ou para baixo ) 0 até 400
w = largura ( mais gorda ou magra )
h = altura ( pequena ou alta )

-Função line(x, y, w, h)
-Função rect ( Retângulo )
rect(x¹, y¹, x², y²)

//Isso é um comentário

Aula 03 :

background(148, 251, 255); // RGB
Colorir o fundo da imagem

noStroke();
Remove os contornos da imagem

//face
fill(255, 255, 0);
Colorir todo rosto
ellipse(202, 208, 300, 300);

//eyes
fill(0, 0, 0);
ellipse(157, 151, 40, 40);
ellipse(304, 142, 40, 40);

//mouth
fill(255, 0, 0);
ellipse(257, 240, 120, 136);

//headband
strokeWeight(33);
grossura da linha

stroke(250, 0, 242);
cor da linha
 
line(83, 116, 271, 74);
Cria uma linha

Aula 04

ellipse
fill
noStroke
var 

Aula 05

background
draw
fill
function
noStroke
Operadores Matemáticos( +- */ )
rect
var
x = x +1 ou x += 1 ou x++



